/*
* 异步与性能
* 一 异步：现在与将来
* 1 标准的ajax请求不是同步完成的，意味着ajax函数还没有返回任何值就可以赋值给变量data。
*   如果ajax能够阻塞到响应返回，那么data赋值就会正确工作。
* 2 事件循环
*   javaScript引擎不是独立运行的，它是运行在宿主环境中的。
*   宿主环境提供了一种机制来处理程序中多个代码块的执行，且执行每块时调用javaScript引擎，这种机制被称为事件循环。
*
*   浏览器会设置侦听来自网络的请求，拿到数据之后，会把回调函数插入到事件循环，以此来实现这个回调的调度执行。
*
*   //eventLoop是一个用作队列的数组，先进先出
*   var eventLoop = [];
*   var event;
*
*   //永远执行
*   while( event ) {
*     //一次tick
*     if( eventLoop.length > 0 ) {
*       //拿到队列中的下一个事件（即你的回调函数）
*       event = eventLoop.shift();
*
*       //执行下一个事件
*       try{
*         event();
*       }
*       catch(err){
*         console.log(err)
*       }
*     }
*   }
*
*   setTimeout并没有把回调函数挂在事件循环队列中，是在定时器到时后，环境会把回调函数放在事件循环队列中。
*   所以setTimeout定时器的精度没有那么准确，运行时刻可能会是在设定的时间间隔之后。
*
*
* 3 并行线程
*   "异步"是指现在和将来之间的时间间隙，"并行"是指能够同时发生的事情。
*
*
* */
