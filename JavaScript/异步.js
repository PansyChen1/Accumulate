/*
* 异步与性能
*
* 一 异步：现在与将来
*
* 1 标准的ajax请求不是同步完成的，意味着ajax函数还没有返回任何值就可以赋值给变量data。
*   如果ajax能够阻塞到响应返回，那么data赋值就会正确工作。
*
* 2 事件循环
*   javaScript引擎不是独立运行的，它是运行在宿主环境中的。
*   宿主环境提供了一种机制来处理程序中多个代码块的执行，且执行每块时调用javaScript引擎，这种机制被称为事件循环。
*
*   浏览器会设置侦听来自网络的请求，拿到数据之后，会把回调函数插入到事件循环，以此来实现这个回调的调度执行。
*
*   //eventLoop是一个用作队列的数组，先进先出
*   var eventLoop = [];
*   var event;
*
*   //永远执行
*   while( event ) {
*     //一次tick
*     if( eventLoop.length > 0 ) {
*       //拿到队列中的下一个事件（即你的回调函数）
*       event = eventLoop.shift();
*
*       //执行下一个事件
*       try{
*         event();
*       }
*       catch(err){
*         console.log(err)
*       }
*     }
*   }
*
*   setTimeout并没有把回调函数挂在事件循环队列中，是在定时器到时后，环境会把回调函数放在事件循环队列中。
*   所以setTimeout定时器的精度没有那么准确，运行时刻可能会是在设定的时间间隔之后。
*
* 3 并行线程
*   "异步"是指现在和将来之间的时间间隙，"并行"是指能够同时发生的事情。
*
*   进程和线程
*     进程是系统进行资源分配和调度的一个独立单位；
*     线程是进程的一个实体，是CPU调度和分派的基本单位，是比进程更小的能独立运行的基本单位。
*     线程自己基本不拥有系统资源，只拥有一点在运行中必不可少的资源，但是可以同在统一进程中的其他线程共享进程中的全部资源。
*
*     一个线程可以创建和撤销另一个线程，一个进程中的多个线程可以并发执行。
*
*     线程拥有自己的栈空间，拥有独立的执行序列。
*
*     一个程序至少有一个进程，一个进程至少有一个线程。
*
*     多线程的意义在于在一个应用程序中，有多个执行部分可以同时执行。
*
*   完整执行
*     分块代码具有原子性（原子性是指执行这段代码时，不容许被打断），这称为完整运行（run-to-completion）特性。
*
*   竞态条件
*     由于javaScript单线程的特性，导致多个函数运行顺序具有不确定性，这就是竞态条件，多个函数之间相互竞争，看谁先运行。
*
*   并发
*     多个进程之间是并发运行的，但是它们的各个事件是在事件循环队列中依次运行的。
*     单线程事件循环是并发的一种形式。
*
*
*
*  二 回调
*
*  是js最基础的异步模式。
*
*  promise是更好的异步模式。
*
*
*
* */
